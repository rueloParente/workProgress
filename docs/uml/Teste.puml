@startuml
!pragma layout smetana
class House {
-location: Location
-rooms: List<Room>
-users: List<User>
+House(location: Location)
+getUserManager() : UserManager
+getRoomManager() : RoomManager
+getDeviceManager() : DeviceManager
}
class Location {
-address: String
-zipCode: String
-gpsLocation: String
+Location(address: String, zipCode: String, gpsLocation: String)
}
class Room {
-name: String
-floor: Integer
-dimensions: Dimensions
-devices: List<Device>
-owners: List<User>
+Room(name: String, floor: Integer, dimensions: Dimensions)
}
class Dimensions {
-length: double
-width: double
-height: double
+Dimensions(length: double, width: double, height: double)
}
class Device {
-name: String
-location: Room
-sensors: List<Sensor>
-actuators: List<Actuator>
+Device(name : String, location : Room)
+addSensor(sensor: Sensor) : void
+addActuator(actuator: Actuator) : void
}
class Sensor {
-name: String
-type: Type
-state: boolean
+Sensor(name: String, type: Type)
}
class Type {
-name: String
-units: String
-digital: boolean
+Type(name: String, units: String, digital: boolean)
}
class Actuator {
-name: String
-type: Type
-state: boolean
+Actuator(name: String, type: Type)
}
class User {
-username: String
-roles: List<Role>
+User(username: String)
+addRole(role: Role) : void
}
class Role {
-name: String
+Role(name: String)
}
class HouseManager {
-house: House
+HouseManager(house: House)
+configureLocation(location: Location) : void
+addRoom(room: Room) : void
+listRooms() : List<Room>
}
class DeviceManager {
-house: House
-supportedTypes: List<Type>
+DeviceManager(house: House)
+defineSensorType(type: Type) : void
+addSensorToRoom(room: Room, sensor: Sensor) : void
+getDeviceType(device: Device) : Type
+addSupportedType(type: Type) : void
+removeSupportedType(type: Type) : void
+checkIfTypeIsSupported(type: Type) : boolean
}
class UserManager {
-house: House
+UserManager(house: House)
+addUser(user: User) : void
+assignRoleToUser(user: User, role: Role) : void
}
class RoomManager {
-house: House
+RoomManager(house: House)
+addDeviceToRoom(room: Room, device: Device) : void
}

House "1" -- "0.." Room : contains
Room "1"-- "0.." Device : contains
Device "1" --"1.." Sensor : has a
Device "1" --"0.." Actuator : has a
House "1" -- "1.." User : has
Room "1" -- "0.." User : has
User "1"-- "1.." Role : has
Sensor "1" -- "1" Type : has
Actuator "1" -- "1" Type : has
DeviceManager "1" -- "0.." Type : supports

@enduml